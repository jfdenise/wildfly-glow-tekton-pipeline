apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wildfly-glow-generator-task
spec:
  params:
   - name: gitUrl
     type: string
   - name: gitRevision
     type: string
     default: ""
   - name: gitCommit
     type: string
   - name: gitCommitterDate
     type: string
   - name: contextDir
     type: string
   - name: newBranch
     type: string
  results:
    - name: gitRevision
      description: The branch to create
    - name: contentLocation
      description: Where the generated content has been put
    - name: provisioning
      description: Where the server has been provisioned
    - name: appImage
      description: Application image
    - name: appName
      description: Application name
    - name: serverImage
      description: Server image
    - name: needBuildServerImage
      description: do we need to build the server image
    - name: needBuildAppImage
      description: do we need to build the app image
    - name: serverDockerfile
      description: where the docker file is located
    - name: appDockerfile
      description: where the docker file is located
    - name: appVersion
      description: version of the app
  workspaces:
    - name: sources
      description: The src dir
    - name: current-repo
      description: The current repo
  steps:
    - name: generate-provisioning
      securityContext:
        runAsUser: 0
      image: "quay.io/wildfly/wildfly-runtime:latest"
      env:
        - name: WORKSPACE_SRC_PATH
          value: $(workspaces.sources.path)/$(params.contextDir)
        - name: WORKSPACE_CURRENT_REPO_PATH
          value: $(workspaces.current-repo.path)/$(params.contextDir)
      script: |
        #!/usr/bin/env bash
        set -eu
        srcDir="$WORKSPACE_SRC_PATH"
        files=`ls $srcDir/*.*`
        deployment=""
        ls -l $srcDir
        echo "Internal repo content"
        ls -l $WORKSPACE_CURRENT_REPO_PATH
        mkdir -p $WORKSPACE_SRC_PATH/internal-git-repo/deployments
        echo -n "internal-git-repo" > $(results.contentLocation.path)
        for eachfile in $files
        do
          #md5=($(md5sum "$eachfile"))
          fileName=$(basename $eachfile)
          if [[ $eachfile =~ .*.war ]] || [[ $eachfile =~ .*.jar ]] || [[ $eachfile =~ .*.ear ]]; then
            deployment="$deployment $eachfile"
            cp $eachfile $WORKSPACE_SRC_PATH/internal-git-repo/deployments
            #echo "$md5 $fileName" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
          else
            if [[ !  $eachfile =~ .*.chk ]]; then
              cp $eachfile $WORKSPACE_SRC_PATH/internal-git-repo
             # if [ !  $eachfile = "glow.properties" ]; then
             #   echo "$md5 $fileName" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
             # fi
            fi
          fi
        done
        gitURI=$(params.gitUrl)
        newBranch=$(params.newBranch)
        appName=${gitURI##*/}
        echo -n "$appName" > $(results.appName.path)
        cat <<EOF > "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
        git_url=$(params.gitUrl)
        git_revision=$(params.gitRevision)
        git_commit=$(params.gitCommit)
        git_committer_date=$(params.gitCommitterDate)
        app_name=$appName
        EOF
        
        appVersion=
        if [ -f "$WORKSPACE_CURRENT_REPO_PATH/app.properties" ]; then
          while IFS="=" read -r key value; do
            case "$key" in
             "app_version") 
               appVersion="$value" 
               echo -n "$appVersion" > $(results.appVersion.path) ;;
            esac
          done < "$WORKSPACE_CURRENT_REPO_PATH/app.properties"
        fi
        
        if [ -n "${deployment}" ]; then
            
            echo "Retrieving WildFly Glow"            
            curl --insecure https://repository.jboss.org/nexus/content/repositories/snapshots/org/wildfly/glow/wildfly-glow/1.0.7.Final-SNAPSHOT/wildfly-glow-1.0.7.Final-20240610.114222-13.zip -LO
            unzip wildfly-glow*.zip -d .
            glowDir=`find $PWD -type d -iname "wildfly-glow*"`
            configFile=
            if [ -f "$srcDir/glow.properties" ]; then
              configFile="--config-file=$srcDir/glow.properties"
            fi
            cliScript=
            if [ -f "$srcDir/script.cli" ]; then
              cliScript="--cli-script=$srcDir/script.cli"
            fi
            bashScript=
            if [ -f "$srcDir/init.sh" ]; then
              bashScript="--init-script=$srcDir/init.sh"
            fi

            # generate provisioning and openshift resources
            $glowDir/wildfly-glow scan $deployment --cloud --provision openshift_resources --output-dir "$WORKSPACE_SRC_PATH/scan-results" --properties="-Dorg.wildfly.glow.openshift.git.uri=https://github.com/jfdenise/go-to-openshift -Dorg.wildfly.glow.openshift.git.ref=$newBranch -Dorg.wildfly.glow.openshift.app.name=$appName -Dorg.wildfly.glow.openshift.server.image=quay.io/jdenise/pipeline-wildfly-server" $configFile $cliScript $bashScript
            ls -l "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/app
            ls -l "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/server
            cp -r "$WORKSPACE_SRC_PATH/scan-results/galleon" "$WORKSPACE_SRC_PATH/internal-git-repo"
            # openshift resources
            mkdir "$WORKSPACE_SRC_PATH/internal-git-repo/openshift"
            cp "$WORKSPACE_SRC_PATH"/scan-results/resources/deployment/*.yaml "$WORKSPACE_SRC_PATH/internal-git-repo/openshift"
            cp "$WORKSPACE_SRC_PATH"/scan-results/resources/images/*.yaml "$WORKSPACE_SRC_PATH/internal-git-repo/openshift"
            if [ -d "$WORKSPACE_SRC_PATH/scan-results/resources/deployers" ]; then
              cp "$WORKSPACE_SRC_PATH"/scan-results/resources/deployers/*.yaml "$WORKSPACE_SRC_PATH/internal-git-repo/openshift"
            fi
            
            imageProperties="$WORKSPACE_SRC_PATH"/scan-results/resources/images/images.properties
            while IFS="=" read -r key value; do
            case "$key" in
             "server-image-tag") serverTag="$value" ;;
             "app-image-tag") appTag="$value" ;;
            esac
            done < "$imageProperties"

            serverImage=quay.io/jdenise/pipeline-wildfly-server:$serverTag
            appImage=quay.io/jdenise/pipeline-wildfly-app:$newBranch
            echo "$serverTag serverHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
            echo "$appTag appHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
            echo "$serverTag serverHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk

            # We need to build the server image if no checksum file exists or is different
            buildServerImage="true"
            if [ -f "$WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk" ]; then
              original=($(md5sum $WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk))
              newOne=($(md5sum $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk))
              echo "server original $original newOne $newOne"
              echo "ORIGINAL"
              cat $WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk
              echo "NEWONE"
              cat $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk
              if [ "$original" = "$newOne" ]; then
               buildServerImage="false"
              fi
            fi
            # We need to build the app image if no checksum file exists or is different
            buildAppImage="true"
            if [ -f "$WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk" ]; then
              original=($(md5sum $WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk))
              newOne=($(md5sum $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk))
              echo "app original $original newOne $newOne"
              echo "ORIGINAL"
              cat $WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk
              echo "NEWONE"
              cat $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
              if [ "$original" = "$newOne" ]; then
               buildAppImage="false"
              fi
            fi
            echo -n "$buildAppImage" > $(results.needBuildAppImage.path)
            echo -n "$buildServerImage" > $(results.needBuildServerImage.path)
            # provisioning directory is required for both server and app image
            echo -n "provisioning" > $(results.provisioning.path)
            
            # Required for task that expect to deal with the app image.
            echo -n "$appImage" > $(results.appImage.path)
            if [ $buildAppImage = "true" ]; then
              echo "Must build a new app image"
              if [ -n "$appVersion" ]; then
                appVersion="$(($appVersion + 1))"
              else
                appVersion="1"
              fi
              echo "app_version=$appVersion" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              echo -n "$appVersion" > $(results.appVersion.path)
              # copy deployments in docker context
              mkdir -p $WORKSPACE_SRC_PATH/provisioning
              cp -r "$WORKSPACE_SRC_PATH/scan-results/deployments" "$WORKSPACE_SRC_PATH/provisioning"
              # extensions, cli script and bash script packaged to be run at startup
              if [ -d "$WORKSPACE_SRC_PATH/scan-results/extensions" ]; then
                cp -r "$WORKSPACE_SRC_PATH/scan-results/extensions" "$WORKSPACE_SRC_PATH/provisioning"
              fi
              
              # Copy Docker file
              mkdir -p "$WORKSPACE_SRC_PATH"/internal-git-repo/docker/app
              cp "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/app/Dockerfile $WORKSPACE_SRC_PATH/internal-git-repo/docker/app
              mkdir -p $WORKSPACE_SRC_PATH/provisioning/docker/app
              cp $WORKSPACE_SRC_PATH/internal-git-repo/docker/app/Dockerfile "$WORKSPACE_SRC_PATH/provisioning/docker/app"
              echo -n "docker/app/Dockerfile" > $(results.appDockerfile.path)
            else
              # Copy original docker file
              mkdir -p $WORKSPACE_SRC_PATH/internal-git-repo/docker/app
              cp $WORKSPACE_CURRENT_REPO_PATH/docker/app/Dockerfile $WORKSPACE_SRC_PATH/internal-git-repo/docker/app/Dockerfile
            fi
            
            if [ $buildServerImage = "true" ]; then
              echo "Must build server image"
              # provision server
              $glowDir/wildfly-glow scan $deployment --cloud --provision server --output-dir "$WORKSPACE_SRC_PATH/provisioning/server" $configFile
              echo -n "$serverImage" > $(results.serverImage.path)
              
              # Copy Docker file
              mkdir -p "$WORKSPACE_SRC_PATH"/internal-git-repo/docker/server
              cp "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/server/Dockerfile $WORKSPACE_SRC_PATH/internal-git-repo/docker/server
              mkdir -p $WORKSPACE_SRC_PATH/provisioning/docker/server
              cp $WORKSPACE_SRC_PATH/internal-git-repo/docker/server/Dockerfile $WORKSPACE_SRC_PATH/provisioning/docker/server
              echo -n "docker/server/Dockerfile" > $(results.serverDockerfile.path)
            else
              # Copy original docker file
              mkdir -p $WORKSPACE_SRC_PATH/internal-git-repo/docker/server
              cp $WORKSPACE_CURRENT_REPO_PATH/docker/server/Dockerfile $WORKSPACE_SRC_PATH/internal-git-repo/docker/server/Dockerfile
            fi
            ls -al $WORKSPACE_SRC_PATH/internal-git-repo
        else
            echo "No deployment to scan!"
            exit 1
        fi