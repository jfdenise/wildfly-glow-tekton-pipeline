apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wildfly-glow-generator-task
spec:
  params:
   - name: gitRepo
     type: string
   - name: gitRevision
     type: string
     default: ""
   - name: gitCommit
     type: string
   - name: gitCommitterDate
     type: string
   - name: contextDir
     type: string
   - name: newBranch
     type: string
   - name: userProject
     type: string
  results:
    - name: contentLocation
      description: Where the generated content has been put
    - name: deploymentLocation
      description: Where the generated deployment content has been put
    - name: dockerContext
      description: The docker context
    - name: appImage
      description: Application image
    - name: appName
      description: Application name
    - name: serverImage
      description: Server image
    - name: needBuildServerImage
      description: do we need to build the server image
    - name: needBuildAppImage
      description: do we need to build the app image
    - name: serverDockerfile
      description: where the docker file is located
    - name: appDockerfile
      description: where the docker file is located
  workspaces:
    - name: sources
      description: The src dir
    - name: app-repo
      description: The app repo
    - name: current-repo
      description: The current internal repo
  steps:
    - name: scan
      securityContext:
        runAsUser: 0
      image: "quay.io/wildfly/wildfly-runtime:latest"
      env:
        - name: WORKSPACE_SRC_PATH
          value: $(workspaces.sources.path)/$(params.contextDir)
        - name: WORKSPACE_APP_REPO_PATH
          value: $(workspaces.app-repo.path)/$(params.contextDir)
        - name: WORKSPACE_CURRENT_REPO_PATH
          value: $(workspaces.current-repo.path)/$(params.contextDir)
      script: |
        #!/usr/bin/env bash
        set -eu
        srcDir="$WORKSPACE_APP_REPO_PATH"
        files=`ls $srcDir/*.*`
        deployment=""
        ls -l $srcDir
        echo "Internal repo content"
        ls -l $WORKSPACE_CURRENT_REPO_PATH
        
        gitURI=$(params.gitRepo)
        newBranch=$(params.newBranch)
        appName=${gitURI##*/}-$(params.gitRevision)
        echo -n "$appName" > $(results.appName.path)
        
        appVersion=
        doNothing="false"
        appImage=
        if [ -f "$WORKSPACE_CURRENT_REPO_PATH/app.properties" ]; then
          while IFS="=" read -r key value; do
            case "$key" in
             "app_version") 
               appVersion="$value" ;;
             "git_commit") 
               currentCommit="$value" 
               if [ "$currentCommit" = "$(params.gitCommit)" ]; then           
                echo -n "false" > $(results.needBuildAppImage.path)
                echo -n "false" > $(results.needBuildServerImage.path)
                echo "No change in user repository."
                doNothing="true"
               fi
               ;;
             "app_image") 
               appImage="$value" 
               echo -n "$appImage" > $(results.appImage.path) ;;
             "server_image") 
               serverImage="$value" 
               echo -n "$serverImage" > $(results.serverImage.path) ;;
            esac
          done < "$WORKSPACE_CURRENT_REPO_PATH/app.properties"
        fi
        mkdir -p $WORKSPACE_SRC_PATH/internal-git-repo/deployments
        echo -n "internal-git-repo" > $(results.contentLocation.path)
        echo -n "deployment-git-repo" > $(results.deploymentLocation.path)
        echo -n "docker/app/Dockerfile" > $(results.appDockerfile.path)
        echo -n "docker/server/Dockerfile" > $(results.serverDockerfile.path)
        # provisioning directory is required for both server and app image
        echo -n "provisioning" > $(results.dockerContext.path)
        if [ "$doNothing" = "true" ]; then
          echo -n "false" > $(results.needBuildAppImage.path)
          echo -n "false" > $(results.needBuildServerImage.path)
          exit 0
        fi
        for eachfile in $files
        do
          if [[ $eachfile =~ .*.war ]] || [[ $eachfile =~ .*.jar ]] || [[ $eachfile =~ .*.ear ]]; then
            deployment="$deployment $eachfile"
          fi
        done
        cat <<EOF > "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
        git_repo=$(params.gitRepo)
        git_revision=$(params.gitRevision)
        git_commit=$(params.gitCommit)
        git_committer_date=$(params.gitCommitterDate)
        app_name=$appName
        EOF
        
        mkdir -p "$WORKSPACE_SRC_PATH/deployment-git-repo/resources"
        if [ -n "$(params.userProject)" ]; then
          echo "apiVersion: argoproj.io/v1alpha1" > "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "kind: Application" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "metadata:" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  name: $appName" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  namespace: openshift-gitops" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "spec:" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  destination:" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    namespace: $(params.userProject)" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    server: https://kubernetes.default.svc" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  project: default" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  source: " >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    path: resources" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    repoURL: https://$(params.gitRepo)" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    targetRevision: $(params.gitRevision)_deployment" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "  syncPolicy: " >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    automated:" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "      prune: true" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "      selfHeal: false" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    syncOptions:" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
          echo "    - CreateNamespace=false" >> "$WORKSPACE_SRC_PATH/deployment-git-repo/argocd.yaml"
        fi
        if [ -n "${deployment}" ]; then
            echo "Retrieving WildFly Glow"            
            curl --insecure https://repository.jboss.org/nexus/content/repositories/snapshots/org/wildfly/glow/wildfly-glow/1.0.7.Final-SNAPSHOT/wildfly-glow-1.0.7.Final-20240617.182633-15.zip -LO
            unzip wildfly-glow*.zip -d .
            glowDir=`find $PWD -type d -iname "wildfly-glow*"`
            configFile=
            if [ -f "$srcDir/glow.properties" ]; then
              configFile="--config-file=$srcDir/glow.properties"
            fi
            cliScript=
            if [ -f "$srcDir/script.cli" ]; then
              cliScript="--cli-script=$srcDir/script.cli"
            fi
            bashScript=
            if [ -f "$srcDir/init.sh" ]; then
              bashScript="--init-script=$srcDir/init.sh"
            fi
            envFile=
            if [ -f "$srcDir/vars.env" ]; then
              envFile="--build-env-file=$srcDir/vars.env"
            fi
            # generate provisioning and openshift resources
            $glowDir/wildfly-glow scan $deployment --cloud --provision openshift_resources --output-dir "$WORKSPACE_SRC_PATH/scan-results" --properties="-Dorg.wildfly.glow.openshift.app.name=$appName -Dorg.wildfly.glow.openshift.server.image=quay.io/jdenise/pipeline-wildfly-server" $configFile $cliScript $bashScript $envFile
            ls -l "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/app
            ls -l "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/server
            cp -r "$WORKSPACE_SRC_PATH/scan-results/galleon" "$WORKSPACE_SRC_PATH/internal-git-repo"
            # openshift resources
            mkdir -p "$WORKSPACE_SRC_PATH/deployment-git-repo/resources"
            cp "$WORKSPACE_SRC_PATH"/scan-results/resources/deployment/*.yaml "$WORKSPACE_SRC_PATH/deployment-git-repo/resources"
            if [ -d "$WORKSPACE_SRC_PATH/scan-results/resources/deployers" ]; then
              cp "$WORKSPACE_SRC_PATH"/scan-results/resources/deployers/*.yaml "$WORKSPACE_SRC_PATH/deployment-git-repo/resources"
            fi
            imageProperties="$WORKSPACE_SRC_PATH"/scan-results/resources/images/images.properties
            while IFS="=" read -r key value; do
            case "$key" in
             "server-image-tag") serverTag="$value" ;;
             "app-image-tag") appTag="$value" ;;
            esac
            done < "$imageProperties"

            serverImage=quay.io/jdenise/pipeline-wildfly-server:$serverTag
            echo -n "$serverImage" > $(results.serverImage.path)
            echo "$serverTag serverHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
            echo "$appTag appHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
            echo "$serverTag serverHash" >> $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk

            # We need to build the server image if no checksum file exists or is different
            buildServerImage="true"
            if [ -f "$WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk" ]; then
              original=($(md5sum $WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk))
              newOne=($(md5sum $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk))
              echo "server original $original newOne $newOne"
              echo "ORIGINAL"
              cat $WORKSPACE_CURRENT_REPO_PATH/server-checksum.chk
              echo "NEWONE"
              cat $WORKSPACE_SRC_PATH/internal-git-repo/server-checksum.chk
              if [ "$original" = "$newOne" ]; then
               buildServerImage="false"
              fi
            fi
            echo -n "$buildServerImage" > $(results.needBuildServerImage.path)
            # We need to build the app image if no checksum file exists or is different
            buildAppImage="true"
            if [ -f "$WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk" ]; then
              original=($(md5sum $WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk))
              newOne=($(md5sum $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk))
              echo "app original $original newOne $newOne"
              echo "ORIGINAL"
              cat $WORKSPACE_CURRENT_REPO_PATH/app-checksum.chk
              echo "NEWONE"
              cat $WORKSPACE_SRC_PATH/internal-git-repo/app-checksum.chk
              if [ "$original" = "$newOne" ]; then
               buildAppImage="false"
              fi
            fi
            echo -n "$buildAppImage" > $(results.needBuildAppImage.path)
            if [ $buildAppImage = "true" ]; then
              echo "Must build a new app image"
              if [ -n "$appVersion" ]; then
                appVersion="$(($appVersion + 1))"
              else
                appVersion="1"
              fi
              echo "app_version=$appVersion" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              appImage=quay.io/jdenise/pipeline-wildfly-app:$newBranch-$appVersion-$(params.gitCommit)
              echo "app_image=$appImage" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              echo "server_image=$serverImage" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              echo -n "$appImage" > $(results.appImage.path)
              if [ -f "$WORKSPACE_SRC_PATH/deployment-git-repo/resources/$appName-deployment.yaml" ]; then
                # Update the deployment TODO MUST BE BETTER
                sed -i "s|$appName:latest|$appImage|" "$WORKSPACE_SRC_PATH/deployment-git-repo/resources/$appName-deployment.yaml"
              else
                sed -i "s|$appName:latest|$appImage|" "$WORKSPACE_SRC_PATH/deployment-git-repo/resources/$appName-statefulset.yaml"
              fi
              # copy deployments in docker context
              mkdir -p $WORKSPACE_SRC_PATH/provisioning
              cp -r "$WORKSPACE_SRC_PATH/scan-results/deployments" "$WORKSPACE_SRC_PATH/provisioning"
              # extensions, cli script and bash script packaged to be run at startup
              if [ -d "$WORKSPACE_SRC_PATH/scan-results/extensions" ]; then
                cp -r "$WORKSPACE_SRC_PATH/scan-results/extensions" "$WORKSPACE_SRC_PATH/provisioning"
              fi
              
              # Copy Docker file
              mkdir -p "$WORKSPACE_SRC_PATH"/internal-git-repo/docker/app
              cp "$WORKSPACE_SRC_PATH"/scan-results/resources/docker/app/Dockerfile $WORKSPACE_SRC_PATH/internal-git-repo/docker/app
              mkdir -p $WORKSPACE_SRC_PATH/provisioning/docker/app
              cp $WORKSPACE_SRC_PATH/internal-git-repo/docker/app/Dockerfile "$WORKSPACE_SRC_PATH/provisioning/docker/app"
            else
              echo "app_version=$appVersion" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              echo "app_image=$appImage" >> "$WORKSPACE_SRC_PATH/internal-git-repo/app.properties"
              echo -n "$appImage" > $(results.appImage.path)
            fi
            ls -al $WORKSPACE_SRC_PATH/internal-git-repo
        else
            echo "No deployment to scan!"
            exit 1
        fi